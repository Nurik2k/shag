Процессы
1. Основные сведения о процессах.
Понятие процесса  является  одним  из  основных  в  современных  операционных системах.  Дадим  несколько  определений  процесса  (process),  отражающих  различные стороны этого важного понятия:
- Процесс - это абстракция, описывающая выполняющуюся программу.
- Процесс - исполнение последовательности действий в среде, включающей собственно выполняющуюся программу, а также связанных с ней данных и состояний(открытых файлов, текущего каталога и т. п.).
- С точки зрения операционной системы, процесс - единица работы, заявка на потребление системных ресурсов.
- Процесс - объект, которому выделяется процессор.

Первое упоминание о процессе появилось в 60-е годы XX века в операционной системе MULTICS. Если  говорить  о  соотношении  между  процессом  и  программой,  то  справедливы следующие два утверждения:
- программа - это часть состояния процесса. С этой точки зрения процесс нечто большее, чем просто программа;
- программа может вызывать более чем один процесс для выполнения работы. С этой точки зрения программа нечто большее, чем процесс.Классификация процессов. По временным характеристикамразличают интерактивные, пакетные процессы и процессы реального времени. -Время существования интерактивного процесса определяется реакцией ЭВМ на запрос обслуживания и составляет секунды.-Процессы реального времени имеют гарантированное время окончания работы и время реакции мсек. -Пакетные процессы запускаются один вслед за другим и время реакции часы и более.По генеалогическому признакуразличают порождающие и порожденные процессы.

Машинно-зависимые свойства операционных систем по результативности различают эквивалентные, тождественные равные процессы. Все они имеют одинаковый конечный результат, но эквивалентные процессы могут реализовываться как на одном, таки на многих процессорах по одному или разным алгоритмам, тоесть они имеют разные трассы, которые определяют порядок и длительность пребывания процесса  в  разных  состояниях.  Тождественные  процессы реализуются  по  одной  и  той  же  программе,  но  имеютразные  трассы.  Одинаковые процессы реализуются по одной программе и имеют одинаковые трассы.По  времени  развитияпроцессы  делятся  на последовательные,  параллельные  и комбинированные(для последних есть точки, в которыхсуществуют оба процесса, и точки, в которых существует толькоодин процесс).По месту развитияпроцессы делятся на внутренние(реализуютсяна центральном процессоре) и внешние(реализуются на внешнихпроцессорах).По  принадлежности  к  операционной  системепроцессы  бываютсистемные (исполняют программу из состава операционной системы) и пользовательские.
По связности различают процессы:
а) взаимосвязанные, которые имеют какую-то связь (пространственно-временную, управляющую, информационную);
б) изолированные—слабо связанные;
в) информационно-независимые, которые используют совместные ресурсы, но имеют собственные информационные базы;
г) взаимодействующие—имеют  информационные  связи  и  разделяют  общие структуры данных;
д) взаимосвязанные по ресурсам;
е) конкурирующие.

Порядок взаимосвязи процессов определяется правилами синхронизации. Процессы могут находиться в отношении:
а) предшествования—один всегда находится в активном состоянии раньше, чем другой;
б) приоритетности—когда процесс может быть переведен в активное состояние только в том случае, если в состоянии готовности нет процессов с более высоким приоритетом, или процессор свободен, или на нем реализуется процесс с меньшим приоритетом;
в) взаимного исключения—в процессе используется общийкритический ресурс, и процессы не могут развиваться одновременно:
- если один из них использует критический ресурс, то другой находится в состоянии ожидания.
---
2. Понятие дочернего процесса.
Процессы, созданные данным родителем называются дочерними процессами. Дочерний наследует многие из атрибутов родительского процесса.
---
3. Функции манипулирования процессами.
https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/
CreateProcess       - Создает новый процесс и его основной поток. Новый процесс запускается в контексте безопасности вызывающего процесса.
ExitProcess         - Завершает вызывающий процесс и все его потоки.
OpenProcess         - Открывает существующий локальный объект процесса.
TerminateProcess    - Завершает указанный процесс и все его потоки.
WaitForSingleObject - Ожидает завершения процесса.
---
4. Процессы в C#
https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=net-5.0
---
5. Домен приложения.
https://docs.microsoft.com/en-us/dotnet/api/system.appdomain?view=net-5.0
Домен приложения — это механизм, реализованный в .NET, который позволяет запустить группу приложений в одном процессе, обеспечивая относительную изоляцию их друг от друга, в то же время позволяя им взаимодействовать друг с другом значительно быстрее, чем в случае отдельных процессов. В Win32 каждое приложение может состоять из одного или нескольких процессов, каждый из которых в свою очередь может порождать один или несколько потоков, таким образом для неуправляемого кода роль изолированной среды выполняет исключительно процесс, а в .NET роль изолированной среды выполняет домен приложения.

Домен полностью изолирует используемые в его рамках ресурсы от других доменов того же процесса.

Один процесс может содержать любое число доменов приложения, каждый из которых полностью изолирован от других доменов приложения в рамках данного процесса (а также любого другого процесса). С учетом этого следует понимать, что приложение, выполняющееся в одном домене приложения, не может получить данные (в частности, значения глобальных переменных или статических полей) другого домена приложения иначе, как с помощью протокола удаленного взаимодействия .NET. Для платформы .NET не предполагается прямого однозначного соответствия между доменами приложения и потоками. Напротив, домен приложения может иметь множество потоков, выполняющихся в рамках этого домена в любой момент времени. Кроме того, конкретный поток не привязан к одному домену приложения в течение всего времени существования потока. Потоки могут пересекать границы домена приложения, подчиняясь правилам потоков Win32 и целесообразности CLR. Но, хотя активные потоки могут перемещаться через границы доменов приложения, в любой конкретный момент времени один конкретный поток может выполняться в рамках только одного домена приложения (другими словами, один поток не может работать в нескольких доменах приложения одновременно).