--- Принципы создания динамически подключаемых библиотек в Visual C++.

Динамически подключаемая библиотека (dynamic-link library) (DLL) - это модуль, содержащий функции и данные, которые могут быть использованы другим модулем (приложением или DLL).

DLL может определить два вида функций: экспортируемые и внутренние.
- Экспортируемые функции предназначаются для вызова другими модулями, а так же и внутри DLL, где они определяются.
- Внутренние функции обычно предназначаются для вызова только внутри DLL, где они определяются. Хотя DLL может экспортировать данные, но её данные обычно используются только её функциями. Однако, не делается ничего, чтобы воспрепятствовать другому модулю прочитать или записать данные по этому адресу.

DLL предоставляют способ моделирования приложения так, чтобы функциональные возможности более легко могли быть обновлены и многократно используемы. Они также помогают уменьшить  непроизводительные расходы памяти, когда несколько приложений в одно и то же время используют одни и те же функциональные возможности, потому что, хотя каждое приложение и получает свою собственную копию данных, они все таки могут совместно использовать код.

Прикладной программный интерфейс Windows (API) осуществляется как набор динамически подключаемых библиотек (DLL, таким образом любой процесс, который использует Windows API,  использует динамическое связывание.

Есть два метода, чтобы вызвать функцию в DLL:

--- Неявное связывание.
- В выполняемой при загрузке динамической связи (load-time dynamic linking), модуль делает явные вызовы  экспортируемых функции DLL, как будто они являются локальными функциями. Это требует, чтобы Вы связали модуль с импортируемой библиотекой для DLL, которая содержит функции. Импортируемая библиотека снабжает систему информацией, необходимой для загрузки DLL и определяет местонахождение экспортируемых функций DLL, когда загружается приложение. Дополнительную информацию, см. в статье Динамическое связывание выполняемое при загрузке.

--- Явное связывание.
- В динамическом связывании периода выполнения (run-time dynamic linking), модуль использует функцию LoadLibrary или LoadLibraryEx, чтобы загрузить DLL во время выполнения программы. После того, как DLL загрузится, модуль вызывает функцию GetProcAddress, чтобы получить адреса экспортируемых функций DLL. Модуль вызывает экспортируемые функции DLL, используя указатели на них, возвращенные функцией GetProcAddress. Это исключает необходимость в импортируемой библиотеке. Дополнительную информацию, см. в статье Использование динамического связывания периода выполнения.

Каждый процесс, который загружает DLL, отображает её в свое виртуальное адресное пространство. После того, как процесс загрузит DLL по своему виртуальному адресу, он может вызвать экспортируемые DLL функции.

Система обслуживает подсчет ссылок на один поток для каждой DLL. Когда поток загружает DLL, итоговое число ссылок увеличивается на единицу. Когда процесс завершает работу или, когда итоговое число ссылок становится нулевым (только для динамического связывания периода выполнения), DLL выгружается из виртуального адресного пространства процесса.

Подобно любой другой функции, экспортируемая функция DLL выполняется в контексте потока, который вызывает ее. Поэтому, ниже перечислены условия применения:
- Потоки процесса, который вызвал DLL, могут использовать дескрипторы, открытые функцией DLL. Точно так же дескрипторы, открытые любым потоком вызывающего процесса, могут использоваться в функции DLL.
- DLL использует стек вызывающего потока и виртуального адресного пространства вызывающего процесса.
- DLL назначает память из виртуального адресного пространства вызывающего процесса.
 
--- Отложенная загрузка.
https://docs.microsoft.com/ru-ru/cpp/build/reference/linker-support-for-delay-loaded-dlls?view=msvc-170
Без отложенной загрузки единственным способом загрузки библиотеки DLL во время выполнения является использование LoadLibrary и GetProcAddress; Операционная система ЗАГРУЖАЕТ библиотеку DLL при загрузке исполняемого файла или библиотеки DLL.

При отложенной нагрузке при неявной компоновке библиотеки DLL компоновщик предоставляет параметры для задержки загрузки DLL до тех пор, пока программа не вызовет функцию в этой библиотеке DLL.

Приложение может задержать загрузку библиотеки DLL с помощью параметра компоновщика (импорт отложенной загрузки) с вспомогательной функцией. (Реализация вспомогательной функции по умолчанию предоставляется корпорацией Майкрософт.) Вспомогательная функция загружает библиотеку DLL по запросу в среде выполнения, вызывая метод LoadLibrary и GetProcAddress.

Отложенная загрузка библиотеки DLL может быть задана во время сборки EXE-или DLL-проекта. Проект DLL, который задерживает загрузку одной или нескольких библиотек DLL, не должен вызывать точку входа, загруженную с задержкой, в DllMain.

С помощью параметра компоновщика можно указать, какие библиотеки DLL следует отложить загрузку /delayload:dllname.

--- Анализ функции DllMain.
DllMain точка входа
Необязательная точка входа в библиотеку динамической компоновки (DLL). Когда система запускает или завершает процесс или поток, она вызывает функцию точки входа для каждой загруженной библиотеки DLL, используя первый поток процесса. Система также вызывает функцию точки входа для DLL, когда она загружается или выгружается с помощью функций LoadLibrary и FreeLibrary.

Функция входа в DLL:
BOOL WINAPI DllMain
(  
	HINSTANCE hinstDLL,	// указатель на модуль DLL
	DWORD fdwReason,		// флаг причины вызова функции
	LPVOID lpvReserved		// зарезервировано
);

Эта функция вызывается в нескольких случаях, причина вызова описана в fdwReason:
DLL_PROCESS_ATTACH	новый процесс имеет доступ к DLL
DLL_THREAD_ATTACH	новый поток получает доступ к DLL
DLL_THREAD_DETACH	последний поток отсоединяется от DLL
DLL_PROCESS_DETACH	один из потоков процесса отсоединяется от DLL

Если Вы хотите сами обрабатывать эти вызовы, то код должен быть примерно таким:
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)  
{
	switch( fdwReason ){
		case DLL_PROCESS_ATTACH:

			break;
		case DLL_THREAD_ATTACH:         

			break;        
		case DLL_THREAD_DETACH:

			break;
		case DLL_PROCESS_DETACH:

			break;    
	}    
	return TRUE;  
}

--- Разработка динамически подключаемых библиотек с использованием .NET Framework.
https://docs.microsoft.com/ru-ru/dotnet/core/tutorials/library-with-visual-studio?pivots=dotnet-6-0
Библиотека классов определяет типы и методы, которые могут быть вызваны из любого приложения. Если библиотека предназначена для .NET Standard 2.0, она может быть вызвана любой реализацией .NET (включая .NET Framework), которая поддерживает .NET Standard 2.0. Если библиотека предназначена для .NET 6, ее можно вызвать с помощью любого приложения, предназначенного для .NET 6.

Когда вы завершите создание библиотеки классов, можете распространить ее как пакет NuGet или включить как компонент в состав приложения, в котором она используется.
